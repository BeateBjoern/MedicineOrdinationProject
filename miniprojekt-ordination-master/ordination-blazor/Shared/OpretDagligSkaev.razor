@namespace ordinationsapp.Shared

@using shared.Model;
@using shared;
@using ordinationsapp.Model;
@using ordinationsapp.Data;
@inject ApiService apiService

<div class="container">
    <h1>Opret ordination (Daglig skæv)</h1>

    <div class="row">
        <p>Patient: @Patient?.navn (@Patient?.cprnr)</p>
        <div class="form-group row">
            <label for="laegemiddel" class="col-sm-4 col-form-label">Lægemiddel</label>
            <div class="col-sm-8">
            <input readonly type="text" class="form-control" id="laegemiddel" value=@laegemiddel?.navn>
            </div>
        </div>
        <div class="form-group row">
            <label for="startdato" class="col-sm-4 col-form-label">Enhed</label>
            <div class="col-sm-8">
                <input readonly type="text" class="form-control" id="laegemiddel" value=@laegemiddel?.enhed>
            </div>
        </div>

        <div class="form-group row">
            <label for="startdato" class="col-sm-4 col-form-label">Startdato for ordination</label>
            <div class="col-sm-8">
            <input @bind="StartDato" type="date" class="form-control" id="startdato">
            </div>
        </div>

        <div class="form-group row">
            <label for="slutdato" class="col-sm-4 col-form-label">Slutdato for ordination</label>
            <div class="col-sm-8">
            <input @bind="SlutDato" type="date" class="form-control" id="slutdato">
            </div>
        </div>

        <div class="form-group row">
            <label for="anbefalet-enheder" class="col-sm-4 col-form-label">Anbefalet antal enheder per døgn</label>
            <div class="col-sm-8">
                <input readonly type="text" class="form-control" id="anbefalet-enheder" value=@AnbefaletDosisPerDøgnRounded>
            </div>
        </div>
        <div class="form-group row">
            <label for="anbefalet-enheder" class="col-sm-4 col-form-label">Anbefalet antal enheder per døgn</label>
            <div class="col-sm-8">
                <br />
                <br />
                <p style="color:red">@responseMessage</p>
            </div>
        </div>
    </div>    
    <div class="row mt-4">  
        <div class="form-group row">
            <div class="col-sm-2"></div>
            <div class="col-sm-4">
            <input @bind="Tid" type="time" class="form-control" id="dosis-tid">
            </div>
            <div class="col-sm-4">
            <input @bind="Antal" type="number" class="form-control" id="dosis-antal" placeholder="Mængde">
            </div>
            <div class="col-sm-2">
                <button class="btn btn-primary" @onclick="OpretDosis">Opret dosis</button>
            </div>
        </div>

        <div class="form-group row">
            <div class="col-sm-2"></div>
            <div class="col-sm-8">
                <ul class="list-group list-group-flush">
                    @foreach (var dosis in doser)
                    {
                        var tid = dosis.tid.ToString("HH:mm");
                        var antal = dosis.antal;
                        <li class="list-group-item">@($"Tidspunkt: {tid}, antal: {antal}")</li>
                        <button style="width:100px" @onclick="() => SletDosis(dosis)"> Slet dosis </button>
                    }
                </ul>
            </div>
            <div class="col-sm-2"></div>
        </div>
    </div>
   

    <div class="row mt-4">   
        <div class="form-group row">
            <div class="col-sm-8">
            <button class="btn btn-primary" @onclick="Opret">Opret ordination</button>
            <button class="btn btn-secondary" @onclick="() => onFortryd?.Invoke()">Fortryd</button>
            </div>
        </div>
    </div>

   
</div>

@code {
    [Parameter]
    public PatientResponse? Patient { get; set; }
    [Parameter]
    public Laegemiddel? laegemiddel { get; set; }
    [Parameter]
    public double AnbefaletDosisPerDøgn { get; set; }
    public string AnbefaletDosisPerDøgnRounded { get { return AnbefaletDosisPerDøgn.ToString("#.##"); } }
    [Parameter]
    public Action? onFortryd { get; set; }
    [Parameter]
    public Action<string>? onDone { get; set; }

    private DateTime StartDato { get; set; } = DateTime.Now;
    private DateTime SlutDato { get; set; } = DateTime.Now.AddDays(3);
    private List<Dosis> doser = new List<Dosis>();

    private TimeOnly Tid { get; set; }
    private int Antal { get; set; }
    private string responseMessage = "";

    //validering til metode vi har tilføjet 
    private async Task Opret() {
        if (Patient == null || laegemiddel == null)
        {
            responseMessage = "Patient og laegemiddel skal vælges";
            return;
        }
        else if (StartDato > SlutDato)
        {
            responseMessage = "Sludato skal være efter startdato";
            return;
        }
        else if(doser.Count == 0)
        {
            responseMessage = "Der skal mindst vælges èn dosis";
            return;
        }

        AnbefaletDosisDTO _anbefaletDosis = await apiService.GetAnbefaletDosisPerDøgn(Patient.id, laegemiddel);
        double dosisTotal = doser.Sum(sum => sum.antal);

        if (dosisTotal < _anbefaletDosis.anbefaletDosis)
        {
            Console.WriteLine("Opret!");;
            await apiService.OpretDagligSkaev(Patient.id, laegemiddel.LaegemiddelId, doser.ToArray(), StartDato, SlutDato);

            onDone?.Invoke($"Oprettet Daglig Skæv ordination for {Patient.navn}!");
        }
        else
        {
            Console.WriteLine("Valgte dosis overskrider anbefalet døgndosis");
            responseMessage = "Valgte dosis overskrider anbefalet døgndosis";
        }

    }

    private async Task OpretDosis() 
    {
        Console.WriteLine(Tid);
        Console.WriteLine(Antal);
        responseMessage = "";

        if (Antal <= 0)
        {
            responseMessage = "Du har indtastet et ugyldig antal";
            return;
        }

        Dosis dosisFindes = doser.Find(d => d.tid == Util.CreateTimeOnly(Tid));
        if (dosisFindes != null)
        {
            responseMessage = "Dosis med samme tidspunkt findes allerede"; 
            return;
        }

        TimeSpan oneHour = TimeSpan.FromHours(1);
        if (doser.Any(d => Math.Abs((Util.CreateTimeOnly(Tid) - d.tid).TotalHours) < 1))
        {
            responseMessage = "Tidspunkt må ikke være indenfor en time af et andet";
            return;
        }
        
        if(Antal > 0)
        {
            doser.Add(new Dosis(Util.CreateTimeOnly(Tid), Antal));
        }          

    }

    private void SletDosis(Dosis dosis)
    {
        doser.Remove(dosis);
    }

}

